{% set current_mapping = breithbarbot_cropper_parameter('breithbarbot_cropper.mappings')[mapping] %}
{% set identifier = (id is defined and id is not empty) ? '-'~id : '' %}

{% trans_default_domain 'BreithbarbotCropperBundle' %}

{% block breithbarbot_cropper_stylesheets %}
    <link href="{{ asset('bundles/breithbarbotcropper/plugins/cropper.js/cropper.min.css') }}" rel="stylesheet">
    <link href="{{ asset('bundles/breithbarbotcropper/css/main.min.css') }}" rel="stylesheet">
{% endblock %}

{% block breithbarbot_cropper_modals %}
    <div class="modal fade" id="avatar-modal{{ identifier }}" role="dialog" aria-labelledby="avatar-modal{{ identifier }}-label" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <form class="avatar-form" action="{{ path(current_mapping.routes.path_add) }}" enctype="multipart/form-data" method="post">
                    <div class="modal-header">
                        <h5 class="modal-title" id="avatar-modal{{ identifier }}-label">{{ 'croppingTool'|trans }}</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="avatar-body">
                            <!-- Upload image and data -->
                            <div class="avatar-upload">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="avatar-input">{{ 'form.input'|trans }}</label>
                                            <input type="file" class="avatar-input form-control" name="avatar_input" accept="image/*">
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="avatar-title">{{ 'form.title'|trans }}</label>
                                            <input type="text" class="form-control" name="avatar_title">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="additional-data"></div>

                            <!-- Crop and preview -->
                            <div class="row">
                                <div class="col-md-9">
                                    <div class="progress">
                                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                                    </div>
                                    <div class="alert" role="alert"></div>
                                    <div class="avatar-wrapper"></div>
                                </div>
                                <div class="col-md-3">
                                    <div class="avatar-preview" title="{{ 'preview'|trans }}"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">{{ 'modal.close'|trans }}</button>
                        {% if current_mapping.routes.path_delete is defined %}
                            <button type="button" class="avatar-remove btn btn-danger">Supprimer</button>
                        {% endif %}
                        <button type="submit" class="btn btn-primary">{{ 'modal.save'|trans }}</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

{% block breithbarbot_cropper_javascripts %}
    <script>window.jQuery || document.write('<script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha384-vk5WoKIaW/vJyUAd9n/wmopsmNhiy+L2Z+SBxGYnUkunIxVxAv/UtMOhba/xskxh" crossorigin="anonymous"><\/script>')</script>
    <script src="{{ asset('bundles/breithbarbotcropper/plugins/cropper.js/cropper.min.js') }}"></script>
    <script src="{{ asset('bundles/breithbarbotcropper/plugins/dummy_image.js') }}"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var image = document.createElement('img');
            var input = document.querySelector('#avatar-modal{{ identifier }} [type=file]');
            var progress = $('.avatar-body .progress');
            var progressBar = $('.avatar-body .progress-bar');
            var alert = $('.avatar-body .alert');
            var modal = $('#avatar-modal{{ identifier }}');
            var cropper;
            var cropperOption = {
                aspectRatio   : {{ current_mapping.ratio }},
                viewMode      : 1,
                wheelZoomRatio: 0.03,
                autoCropArea  : 1,
                preview       : document.querySelector('.avatar-preview')
            };

            input.addEventListener('change', function (e) {
                var files = e.target.files;
                var done = function (url) {
                    input.value = '';
                    image.src = url;

                    cropper ? cropper.destroy() : null;
                    cropper = null;
                    cropper = new Cropper(image, cropperOption);

                    alert.hide();
                };
                var reader;
                var file;
                var url;

                if (files && files.length > 0) {
                    file = files[0];

                    if (URL) {
                        done(URL.createObjectURL(file));
                    } else if (FileReader) {
                        reader = new FileReader();
                        reader.onload = function (e) {
                            done(reader.result);
                        };
                        reader.readAsDataURL(file);
                    }
                }
            });

            modal.on('show.bs.modal', function () {
                document.querySelector('.avatar-form').reset();
                alert.removeClass('alert-success alert-warning').hide();
                document.querySelector('#avatar-modal{{ identifier }} [type=submit]').disabled = false;
            }).on('shown.bs.modal', function () {
                image = document.querySelector('.avatar-wrapper img');
                cropper = new Cropper(image, cropperOption);
            }).on('hidden.bs.modal', function () {
                cropper.destroy();
                cropper = null;
            });

            document.querySelector('#avatar-modal{{ identifier }} form').addEventListener('submit', function (e) {

                e.preventDefault();

                var avatar = document.querySelector('.avatar-view > img');
                var initialAvatarURL;
                var canvas;

                if (cropper) {
                    canvas = cropper.getCroppedCanvas({
                        width : {{ current_mapping.width }},
                        height: {{ current_mapping.height }},
                    });
                    initialAvatarURL = avatar.src;
                    avatar.src = canvas.toDataURL();
                    progress.show();
                    canvas.toBlob(function (blob) {

                        var formData = new FormData();
                        var avatar_title = document.querySelector('#avatar-modal{{ identifier }} [name=avatar_title]').value;
                        formData.append('avatar_input', blob, (avatar_title) ? avatar_title : 'image');
                        document.querySelectorAll('#avatar-modal{{ identifier }} .additional-data > input').forEach(function (item) {
                            formData.append(item.name, item.value);
                        });

                        $.ajax(document.querySelector('#avatar-modal{{ identifier }} form').action, {
                            method     : 'POST',
                            data       : formData,
                            processData: false,
                            contentType: false,

                            xhr: function () {
                                var xhr = new XMLHttpRequest();

                                xhr.upload.onprogress = function (e) {
                                    var percent = '0';
                                    var percentage = '0%';

                                    if (e.lengthComputable) {
                                        percent = Math.round((e.loaded / e.total) * 100);
                                        percentage = percent + '%';
                                        progressBar.width(percentage).attr('aria-valuenow', percent).html(percentage);
                                    }
                                };

                                return xhr;
                            }

                        }).done(function (data) {
                            if (data.return) {
                                document.querySelector('#avatar-modal{{ identifier }} [type=submit]').disabled = true;
                                document.querySelector('[data-cropper-image-id]').value = data.additional_data.file.id;
                                alert.show().addClass('alert-success').removeClass('alert-warning').html(data.message);
                                setTimeout(function () {
                                    $('#avatar-modal{{ identifier }}').modal('hide');
                                }, 2000);
                            } else {
                                alert.show().addClass('alert-warning').html(data.message);
                            }
                        }).fail(function (jqXHR) {
                            avatar.src = initialAvatarURL;
                            alert.show().addClass('alert-warning').html('{{ 'upload.error'|trans }}<br>'+jqXHR.responseJSON.message);
                        }).always(function () {
                            progress.hide();
                        });
                    });
                }
            });

            {% if current_mapping.routes.path_delete is defined %}
                document.querySelector('.avatar-remove').addEventListener('click', function (e) {
                    e.preventDefault();

                    var avatar = document.querySelector('.avatar-view > img');

                    if (confirm('{{ 'deleteImage'|trans|e('js') }}')) {
                        $.ajax({
                            data    : $('#avatar-modal{{ identifier }} form').serialize(),
                            dataType: "json",
                            method  : "POST",
                            url     : "{{ path(current_mapping.routes.path_delete) }}"
                        }).done(function (data) {
                            if (data.return) {
                                alert.show().addClass('alert-success').html(data.message);
                                setTimeout(function () {
                                    avatar.src = '/placeholder/{{ current_mapping.width ~'x'~current_mapping.height }}';
                                    DummyImage.generate();
                                    $('#avatar-modal{{ identifier }}').modal('hide');
                                }, 2000);
                            } else {
                                alert.show().addClass('alert-warning').html(data.message);
                            }
                        }).fail(function (jqXHR) {
                            alert.show().addClass('alert-warning').html('{{ 'delete.error'|trans }}<br>'+jqXHR.responseJSON.message);
                        });
                    }
                });
            {% endif %}
        });
    </script>
{% endblock %}
